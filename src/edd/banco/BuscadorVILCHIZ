package edd.banco;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import edd.estructuras.lineales.LinkedQueue;
import edd.estructuras.lineales.PriorityQueue;
import edd.estructuras.lineales.Queue;
import edd.readerwriter.ReaderWriter;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;

public class Buscador {
  private Reporte reporte = new Reporte();
  
  private Cliente[] clientes;
  
  private Empleado[] empleados;
  
  private Tramite[] tramites;
  
  private Turno[] turnos;
  
  private int ultimoTurno;
  
  private Queue<Cliente> clientesPorAtender;
  
  private PriorityQueue<Empleado> empleadosDisponibles;
  
  private PriorityQueue<Turno> turnosAtendiendo;
  
  int horaActual;
  
  int minutoActual;
  
  public Buscador() {
    try {
      String inputJSON = ReaderWriter.readLines("clientes.json");
      Type listOfMyClassObject = (new TypeToken<ArrayList<Cliente>>() {
        
        }).getType();
      Gson gson = new Gson();
      List<Cliente> list = (List<Cliente>)gson.fromJson(inputJSON, listOfMyClassObject);
      this.clientes = new Cliente[list.size()];
      int i = 0;
      for (Cliente t : list)
        this.clientes[i++] = t; 
    } catch (IOException e) {
      this.clientes = null;
    } 
    try {
      String inputJSON = ReaderWriter.readLines("empleados.json");
      Type listOfMyClassObject = (new TypeToken<ArrayList<Empleado>>() {
        
        }).getType();
      Gson gson = new Gson();
      List<Empleado> list = (List<Empleado>)gson.fromJson(inputJSON, listOfMyClassObject);
      this.empleados = new Empleado[list.size()];
      int i = 0;
      for (Empleado t : list)
        this.empleados[i++] = t; 
    } catch (IOException e) {
      this.empleados = null;
    } 
    this.tramites = Tramite.tramites();
  }
  
  public int cantidadEmpleados() {
    if (this.empleados == null)
      return -1; 
    return this.empleados.length;
  }
  
  public int cantidadClientes() {
    if (this.clientes == null)
      return -1; 
    return this.clientes.length;
  }
  
  public void generarEmpleados(int size) {
    Gson gson = new Gson();
    this.empleados = Empleado.generate(size);
    save(indenta(gson.toJson(this.empleados)), "empleados.json");
  }
  
  public void generarClientes(int size) {
    Gson gson = new Gson();
    this.clientes = Cliente.generate(size);
    this.turnos = new Turno[this.clientes.length];
    this.ultimoTurno = 0;
    save(indenta(gson.toJson(this.clientes)), "clientes.json");
  }
  
  private String indenta(String str) {
    StringBuilder sb = new StringBuilder();
    String indentacion = "";
    for (int i = 0; i < str.length(); i++) {
      switch (str.charAt(i)) {
        case ':':
          sb.append(str.charAt(i));
          sb.append(" ");
          break;
        case '[':
        case '{':
          indentacion = indentacion + "    ";
        case ',':
          sb.append(str.charAt(i));
          sb.append("\n");
          sb.append(indentacion);
          break;
        case ']':
        case '}':
          indentacion = indentacion.substring(4);
          sb.append("\n");
          sb.append(indentacion);
          sb.append(str.charAt(i));
          break;
        default:
          sb.append(str.charAt(i));
          break;
      } 
    } 
    return sb.toString();
  }
  
  private void save(String json, String fileName) {
    try {
      ReaderWriter.writeLines(fileName, json);
    } catch (IOException e) {
      System.out.println(e);
    } 
  }
  
  private void load() {
    this.clientesPorAtender = (Queue<Cliente>)new LinkedQueue();
    this.empleadosDisponibles = new PriorityQueue();
    this.turnosAtendiendo = new PriorityQueue();
    for (int i = 1; i < this.clientes.length; i++) {
      for (int j = i; j > 0 && 
        this.clientes[j].compareTo(this.clientes[j - 1]) < 0; j--) {
        Cliente aux = this.clientes[j];
        this.clientes[j] = this.clientes[j - 1];
        this.clientes[j - 1] = aux;
      } 
    } 
    for (Cliente c : this.clientes)
      this.clientesPorAtender.enqueue(c); 
    for (Empleado e : this.empleados)
      this.empleadosDisponibles.enqueue(e); 
    this.horaActual = Cliente.HORA_INICIO;
    this.minutoActual = 0;
    this.turnos = new Turno[this.clientes.length];
    this.ultimoTurno = 0;
    this.reporte = new Reporte();
  }
  
  public int simular() {
    if (cantidadEmpleados() == -1)
      return 1; 
    if (cantidadClientes() == -1)
      return 2; 
    load();
    while (!this.clientesPorAtender.isEmpty()) {
      Cliente siguienteCliente = (Cliente)this.clientesPorAtender.first();
      Turno turnoActual = (Turno)this.turnosAtendiendo.first();
      if (first(siguienteCliente, turnoActual)) {
        calendariza(siguienteCliente);
        continue;
      } 
      calendariza(turnoActual);
    } 
    while (!this.turnosAtendiendo.isEmpty())
      calendariza((Turno)this.turnosAtendiendo.first()); 
    Gson gson = new Gson();
    save(indenta(gson.toJson(this.empleados)), "empleados_simulacion.json");
    save(indenta(gson.toJson(this.turnos)), "turnos.json");
    save(indenta(gson.toJson(this.reporte)), "reporte.json");
    return 0;
  }
  
  private boolean first(Cliente c, Turno t) {
    if (t == null)
      return true; 
    int cHora = c.getHora();
    int cMinuto = c.getMinuto();
    int cVal = cHora * 60 + cMinuto;
    int tHora = t.getHoraSalida();
    int tMinuto = t.getMinutoSalida();
    int tVal = tHora * 60 + tMinuto;
    if (cVal < tVal && 
      !this.empleadosDisponibles.isEmpty())
      return true; 
    return false;
  }
  
  private void calendariza(Cliente c) {
    int hora = c.getHora();
    int minuto = c.getMinuto();
    int v = hora * 60 + minuto;
    int val = this.horaActual * 60 + this.minutoActual;
    if (val < v)
      actualiza(hora, minuto); 
    Empleado empleado = (Empleado)this.empleadosDisponibles.dequeue();
    this.clientesPorAtender.dequeue();
    Turno t = new Turno(c, empleado, this.horaActual, this.minutoActual);
    this.reporte.agregarTurno(t);
    this.turnosAtendiendo.enqueue(t);
  }
  
  private void calendariza(Turno t) {
    int hora = t.getHoraSalida();
    int minuto = t.getMinutoSalida();
    int v = hora * 60 + minuto;
    int val = this.horaActual * 60 + this.minutoActual;
    if (val < v)
      actualiza(hora, minuto); 
    t.getEmpleado().increaseAtendidos();
    this.empleadosDisponibles.enqueue(t.getEmpleado());
    this.turnosAtendiendo.dequeue();
    this.reporte.sacarTurno(t);
    this.turnos[this.ultimoTurno++] = t;
  }
  
  private void actualiza(int hora, int minuto) {
    while (minuto > 59) {
      minuto -= 60;
      hora++;
    } 
    this.horaActual = hora;
    this.minutoActual = minuto;
  }
}
